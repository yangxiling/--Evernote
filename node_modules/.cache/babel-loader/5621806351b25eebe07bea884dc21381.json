{"ast":null,"code":"export function parse(str) {\n  if (!str) {\n    throw new Error('invalid date, receive null');\n  }\n\n  if (typeof str === 'number') {\n    return new Date(str);\n  }\n\n  if (isDate(str)) {\n    return str;\n  }\n\n  const date = new Date(str);\n\n  if (date.getTime()) {\n    return date;\n  }\n\n  return parseDate(str);\n}\n/**\n * @see http://momentjs.com/docs/#/displaying/format/\n */\n\nexport function format(date, patern = 'YYYY-MM-DD') {\n  date = parse(date);\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hour = date.getHours();\n  const minute = date.getMinutes();\n  const second = date.getSeconds();\n  const map = {\n    YY: ('' + year).substr(-2),\n    YYYY: '' + year,\n    M: '' + month,\n    MM: ('0' + month).substr(-2),\n    D: '' + day,\n    DD: ('0' + day).substr(-2),\n    H: '' + hour,\n    HH: ('0' + hour).substr(-2),\n    h: '' + hour % 12,\n    hh: ('0' + hour % 12).substr(-2),\n    m: '' + minute,\n    mm: ('' + minute).substr(-2),\n    s: '' + second,\n    ss: ('0' + second).substr(-2)\n  };\n  return patern.replace(/([a-zA-Z]+)/g, (_, p) => map[p] || p);\n}\nconst ONE_DAY = 3600 * 24 * 1000;\nconst TEN_MINUTE = 10 * 60 * 1000;\nexport function friendly(date) {\n  date = parse(date);\n\n  if (Date.now() - date.getTime() < TEN_MINUTE) {\n    return '刚刚';\n  }\n\n  const today = new Date();\n  today.setHours(23, 59, 59, 999);\n  const diff = today.getTime() - date.getTime();\n  const diffDays = Math.floor(diff / ONE_DAY);\n  const diffYears = today.getFullYear() - date.getFullYear();\n  const labels = ['今天', '昨天', '前天'];\n  const pattern = labels[diffDays] || (diffYears === 0 ? 'M月D日' : 'YYYY年M月D日');\n  return format(date, `${pattern} H:m`);\n}\nexport default {\n  parse,\n  format,\n  friendly\n};\nconst toString = Object.prototype.toString;\n\nfunction isDate(d) {\n  return d && toString.call(d) === '[object Date]';\n}\n/**\n * @see https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n */\n// YYYY-MM-DDTHH:mm:ss.sssZ\n\n\nconst re = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})([-+]\\d{4})$/;\nconst invalid = new Date('invalid');\n\nfunction parseDate(str) {\n  const match = re.exec(str);\n\n  if (!match) {\n    return invalid;\n  }\n\n  const m = match.slice(1, 8).map(v => parseInt(v, 10));\n  const d = new Date(Date.UTC(m[0], m[1] - 1, m[2], m[3], m[4], m[5]));\n  const z = parseInt(match[8], 10); // exp +0800 -> should minus 8 hours\n\n  const diff = z / 100 * 3600 * 1000; // to milliseconds\n\n  const time = d.getTime() - diff;\n  return new Date(time);\n}\n\nconst $test = {\n  parseDate\n};\nexport { $test };","map":{"version":3,"sources":["/Users/yl/Documents/GitHub/MyProject/evernote/src/utils/date.js"],"names":["parse","str","Error","Date","isDate","date","getTime","parseDate","format","patern","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","map","YY","substr","YYYY","M","MM","D","DD","H","HH","h","hh","m","mm","s","ss","replace","_","p","ONE_DAY","TEN_MINUTE","friendly","now","today","setHours","diff","diffDays","Math","floor","diffYears","labels","pattern","toString","Object","prototype","d","call","re","invalid","match","exec","slice","v","parseInt","UTC","z","time","$test"],"mappings":"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","sourcesContent":["export function parse(str) {\n  if (!str) {\n    throw new Error('invalid date, receive null');\n  }\n  if (typeof str === 'number') {\n    return new Date(str);\n  }\n\n  if (isDate(str)) {\n    return str;\n  }\n\n  const date = new Date(str);\n  if (date.getTime()) {\n    return date;\n  }\n  return parseDate(str);\n}\n\n\n/**\n * @see http://momentjs.com/docs/#/displaying/format/\n */\nexport function format(date, patern = 'YYYY-MM-DD') {\n  date = parse(date);\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hour = date.getHours();\n  const minute = date.getMinutes();\n  const second = date.getSeconds();\n  const map = {\n    YY: ('' + year).substr(-2),\n    YYYY: '' + year,\n    M: '' + month,\n    MM: ('0' + month).substr(-2),\n    D: '' + day,\n    DD: ('0' + day).substr(-2),\n    H: '' + hour,\n    HH: ('0' + hour).substr(-2),\n    h: '' + (hour % 12),\n    hh: ('0' + (hour % 12)).substr(-2),\n    m: '' + minute,\n    mm: ('' + minute).substr(-2),\n    s: '' + second,\n    ss: ('0' + second).substr(-2)\n  };\n  return patern.replace(/([a-zA-Z]+)/g, (_, p) => map[p] || p);\n}\n\n\nconst ONE_DAY = 3600 * 24 * 1000;\nconst TEN_MINUTE = 10 * 60 * 1000;\nexport function friendly(date) {\n  date = parse(date);\n  if (Date.now() - date.getTime() < TEN_MINUTE) {\n    return '刚刚';\n  }\n\n  const today = new Date();\n  today.setHours(23, 59, 59, 999);\n  const diff = today.getTime() - date.getTime();\n  const diffDays = Math.floor(diff / ONE_DAY);\n  const diffYears = today.getFullYear() - date.getFullYear();\n  const labels = ['今天', '昨天', '前天'];\n  const pattern = labels[diffDays] ||\n        (diffYears === 0 ? 'M月D日' : 'YYYY年M月D日');\n  return format(date, `${pattern} H:m`);\n}\n\n\nexport default { parse, format, friendly };\n\n\nconst toString = Object.prototype.toString;\nfunction isDate(d) {\n  return d && toString.call(d) === '[object Date]';\n}\n\n\n/**\n * @see https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n */\n// YYYY-MM-DDTHH:mm:ss.sssZ\nconst re = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})([-+]\\d{4})$/;\nconst invalid = new Date('invalid');\nfunction parseDate(str) {\n  const match = re.exec(str);\n  if (!match) {\n    return invalid;\n  }\n  const m = match.slice(1, 8).map(v => parseInt(v, 10));\n  const d = new Date(Date.UTC(m[0], m[1] - 1, m[2], m[3], m[4], m[5]));\n  const z = parseInt(match[8], 10);\n  // exp +0800 -> should minus 8 hours\n  const diff = z / 100 * 3600 * 1000;  // to milliseconds\n  const time = d.getTime() - diff;\n  return new Date(time);\n}\n\n\nconst $test = { parseDate };\nexport { $test };\n"]},"metadata":{},"sourceType":"module"}